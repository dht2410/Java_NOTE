### 字符串排序

两种排序：

1. 低位优先（LSD）
2. 高位优先（MSD）

##### 1. 键索引计数法

（1）频率统计

计算每个元素所属组的频率

（2）频率累加

```java
for (int r=0;r<R;r++)
    count[r+1]+=count[r];
```

（3）数据分类

```java
for (int i=0;i<N;i++)
    aux[count[a[i].key()]++]=a[i];//a[i]从所属组别的累积排序位置开始放自己
```

（4）回写

aux[]回写回a[]

##### 2. 低位优先的字符串排序

**基数排序**

```java
/*
* 字符串排序，低位优先
* 一般适用于字符长度相同的排序
* 先按地位排，再按倒数第二位排，最后按最高位排，类似于扑克牌排序（基数排序）
* 具有稳定性
* */
public class LSD {
    public static void sort(String[] a, int w){
        int N = a.length;
        int R = 256;
        String[] aux = new String[R+1];
        for (int d=w-1;d>=0;d--){
            int[] count = new int[R+1];
            //计算频率
            for (int i=0;i<N;i++)
                count[a[i].charAt(d)+1]++;
            //频率加和
            for (int r=0;r<R;r++)
                count[r+1]+=count[r];
            //额外数组，按频率加和累加的排序
            for (int i=0;i<N;i++)
                aux[count[a[i].charAt(d)]+1]=a[i];
            //回写
            for (int i=0;i<N;i++)
                a[i]=aux[i];
        }
    }
}
```

##### 3. 高位优先的字符串排序

```java
/*
* 高位优先排序，递归进行
* */
public class MSD {
    private final static int R=256;    //字母表中字符数量
    private static String[] aux;       //额外空间
    //字符串s的第d位在字母表中的排序
    private static int charAt(String s, int d){
        int N = s.length();
        return (d<N)? s.charAt(d):-1;
    }
    public static void sort(String[] a){
        int N = a.length;
        aux = new String[N];
        sort(a,0,N-1,0);
    }
    //a[lo]到a[hi]的0到d-1位相同
    private static void sort(String[] a, int lo, int hi, int d){
        //这是没有进行排序方法切换，如果切换成插入排序则会
        if(lo>=hi)
            return;
        //为什么是R+2而不是R+1,因为需要一位来存储字符串长度为d的字符串数量
        int[] count = new int[R+2];
        for(int i=lo;i<=hi;i++)
            count[charAt(a[i],d)+2]++;
        for(int r=0;r<R+1;r++)
            count[r+1]+=count[r];
        for(int i=lo;i<=hi;i++)
            aux[count[charAt(a[i],d)+1]++]=a[i];
        for(int i=lo;i<=hi;i++)
            a[i]=aux[i-lo];
        for(int r=0;r<R;r++)
            sort(a,lo+count[r],lo+count[r+1]-1,d+1);
    }

    public static void main(String[] args){
        String[] a = {"a","ab","b","abb"};
        sort(a);
        for(String s:a)
            System.out.println(s);
    }
}
```

注意事项：

1. 小型子数组
2. 等值键问题，会重复很多
3. 额外空间，需要aux[]和count[]，主要考虑count[]，因为递归每一层都需要一个count[]

##### 4. 三向字符串快速排序

```java
/*
* 三项字符串快速排序，以快速排序为基础
* */
public class Quick3string {
    private static int charAt(String a, int d){
        return (a.length()>d)?a.charAt(d):-1;
    }
    private static void exch(String[] a, int i, int j){
        String temp = a[i];
        a[i]=a[j];
        a[j]=temp;
    }
    public static void sort(String[] a){
        sort(a,0,a.length-1,0);
    }
    private static void sort(String[] a, int lo, int hi, int d){
        if(lo>=hi) return;
        int lt = lo, gt=hi;
        int v = charAt(a[lo],d);
        int i = lo+1;
        while(i<=gt){
            int w = charAt(a[i],d);
            if (w<v) exch(a,i++,lt++);
            else if (w>v) exch(a,i,gt--);
            else i++;
        }
        sort(a,lo,lt-1,d);
        if (v>=0) sort(a,lt,gt,d+1);
        sort(a,gt+1,hi,d);
    }
}
```

