### 锁

Java并发包：**使用和实现**

#### 1. Lock接口

锁显式地获取锁，synchronized关键字隐式地获取锁

```java
Lock lock = new ReentrantLock();
lock.lock();  //lock()写在try外面，因为当try块中异常抛出时，锁会被无故释放
try{
    
}finally{
    lock.unlock();
}
```

锁具有的synchronized关键字不具备的特性：

- 尝试非阻塞地获取锁 （void lockInterruptibly() throws InterruptedException）
- 能被中断地获取锁 (boolean tryLock())
- 超时获取锁 (boolean tryLock(long time, TimeUnit unit) throws InterruptedException)

#### 2. 队列同步器（AbstractQueuedSynchronizer）

构建锁或者其他同步组件的基础框架，**使用了一个int成员变量表示同步状态**，通过**内置的FIFO队列**来完成资源获取线程的排队工作。

同步器是实现锁的关键。**锁是面向使用者的**，它定义了使用者和锁交互的接口，隐藏了实现细节；**同步器是面向锁的实现者**，简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待和唤醒等底层操作。

对这个类的使用需要重新定义以下方法：

tryAcquire(int) 
tryRelease(int) 
tryAcquireShared(int) 
tryReleaseShared(int) 
isHeldExclusively() 

对同步状态的获取和修改：

- getState()
- setState(int newState)
- compareAndSetState(int expect, int update)

```java
class Mutex implement Lock{
    //静态内部类，自定义同步器
    private static class Sync extends AbstractQueuedSynchronizer{
        ...
        //实现tryAcquire、tryRelease等操作
    }
    private Sync sync = new Sync();
    
    //仅需将操作代理到Sync上即可
    public void lock(){sync.acquire(1);}
    public boolean tryLock(){return sync.tryAcquire(1);}
    //...其他Lock接口方法
}
```

##### AbstractQueuedSynchronizer的实现分析

##### 1. 同步队列

同步器内部的同步队列，是一个**FIFO的双向队列**。当线程获取同步状态失败时，同步器会将当前线程和其状态构成一个Node加入同步队列，同时阻塞当前线程。当同步状态释放时，会把首结点的线程唤醒，使其尝试获取同步状态。

```java
static final class Node{
    //字段
    volatile int waitStatus;  //包含5种状态
    volatile Node prev;       //前驱节点
    volatile Node next;       //后继节点
    volatile Thread thread;   //Node对应的线程
    Node nextWaiter;          //等待队列中的后继节点
}
```

同步器拥有首节点（head）和尾节点（tail），没有获得同步状态的节点会被加入队列尾部。

```java
class AbstractQueuedSynchronizer{
    //同步器字段
    private transient volatile Node head;
    private transient volatile Node tail;
    private volatile int state;
}
```

**（1）独占式获取**

过程：

lock.lock()方法即为调用public void lock(){sync.acquire(1);}

```java
//tryAcquire是需要重写的方法
//在acquireQueued中，自旋的获取同步状态
//获取同步状态的条件是node.prev==head&&tryAquire(args),即前驱节点为头节点且获得了同步状态，此时返回false
//addWaiter为节点构造并加入同步队列，其中调用下面的enq方法
public final void acquire(int arg) {
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}
```

当一个线程没有得到锁，就会被包成Node加入到队列的尾结点去。这个过程要保证线程安全，基于CAS的设置尾结点的方法：compareAndSetTail(Node expect, Node update)，它需要传递当前线程认为的尾结点和当前节点，只有设置成功才正式与尾结点建立联系。

```java
//入队操作，没有初始化先初始化，返回尾结点的前驱
//enq方法通过CAS将并发添加节点的请求串行化
private Node enq(final Node node) {
    for (;;) {
        Node t = tail;
        if (t == null) { // Must initialize
            if (compareAndSetHead(new Node()))
                tail = head;
        } else {
            node.prev = t;
            if (compareAndSetTail(t, node)) {
                t.next = node;
                return t;
            }
        }
    }
}

//唤醒后继节点
private void unparkSuccessor(Node node) {
    /*
         * If status is negative (i.e., possibly needing signal) try
         * to clear in anticipation of signalling.  It is OK if this
         * fails or if status is changed by waiting thread.
         */
    int ws = node.waitStatus;
    if (ws < 0)
        compareAndSetWaitStatus(node, ws, 0);

    /*
         * Thread to unpark is held in successor, which is normally
         * just the next node.  But if cancelled or apparently null,
         * traverse backwards from tail to find the actual
         * non-cancelled successor.
         */
    Node s = node.next;
    if (s == null || s.waitStatus > 0) {
        s = null;
        for (Node t = tail; t != null && t != node; t = t.prev)
            if (t.waitStatus <= 0)
                s = t;
    }
    if (s != null)
        LockSupport.unpark(s.thread);
}


private final boolean compareAndSetTail(Node expect, Node update) {
    return unsafe.compareAndSwapObject(this, tailOffset, expect, update);
}
```

同步队列首结点是获取同步状态成功的节点，首结点的线程在释放同步状态时，会唤醒后继节点。

设置首结点是通过获取同步状态成功的线程来完成的。由于只有一个线程获取到锁，因此不需要CAS操作。

**（2）共享式获取**

```java
//共享式获取就是重写tryAcquireShared和tryReleaseShared方法
public final void acquireShared(int arg) {
    if (tryAcquireShared(arg) < 0)
        doAcquireShared(arg);
```

#### 3.重入锁ReentrantLock

某个线程在获得锁之后调用tryAcquire方法后会重新获得锁，state++

包括公平锁和非公平锁

ReentrantLock内部类Sync实现了同步器接口，FairLock和NonfairLock都继承了Sync方法

FairLock的tryAcquire为fairTryAcquire方法，NonfairLock的tryAcquire为NonfairTryAcquire方法

```java
//对于非公平锁，只要CAS设置同步状态成功，则表示该线程获取了锁
final boolean nonfairTryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState();
    //没人占
    if (c == 0) {
        if (compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    //自己占的
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc < 0) // overflow
            throw new Error("Maximum lock count exceeded");
        setState(nextc);
        return true;
    }
    return false;
}
```

```java
//公平锁比非公平锁多的是hasQueuedPredecessors()判断，判断同步队列中有没有在等的线程，如果有则加入队列。这是和非公平锁的不同之处。
protected final boolean tryAcquire(int acquires) {
    final Thread current = Thread.currentThread();
    int c = getState();
    if (c == 0) {
        if (!hasQueuedPredecessors() &&
            compareAndSetState(0, acquires)) {
            setExclusiveOwnerThread(current);
            return true;
        }
    }
    else if (current == getExclusiveOwnerThread()) {
        int nextc = c + acquires;
        if (nextc < 0)
            throw new Error("Maximum lock count exceeded");
        setState(nextc);
        return true;
    }
    return false;
}
```

```java
//无论公平非公平，释放锁的逻辑一致
protected final boolean tryRelease(int releases) {
    int c = getState() - releases;
    if (Thread.currentThread() != getExclusiveOwnerThread())
        throw new IllegalMonitorStateException();
    boolean free = false;
    //自己释放了
    if (c == 0) {
        free = true;
        setExclusiveOwnerThread(null);
    }
    setState(c);
    return free;
}
```

#### 4.LockSupport工具

LockSupport.park()------------阻塞当前线程

LockSupport.park(long nanos)-------------限时阻塞当前线程

LockSupport.unpark()------------唤醒处于阻塞状态的线程

#### 5.Condition接口

任意一个java对象都有监视器方法，wait(), notify()等；Condition也实现了同样的功能。

和对象监视器不同之处：

- 有多个等待队列，比如生产者消费者各有一个队列
- 支持线程在等待时不响应中断
- 支持线程等待到某一个特定时间

一个Condition绑定在一个Lock对象上，如：

```java
Lock lock = new ReentrantLock();
Condition condition = lock.newCondition();//在AQS中

public void conditionWait() throws InterruptedException{
    lock.lock();
    try{
        conditon.await();  //当前线程等待
    }finally{
        lock.unlock();
    }
}

public void conditionSignal() throws InterruptedException{
    lock.lock();
    try{
        conditon.signal();  //唤醒等待线程
    }finally{
        lock.unlock();
    }
}
```

**实现原理：**

线程调用conditon.await()方法后，就会构建节点进入同步队列。该节点和AQS的节点一样。

**Object监视器模型，一个对象拥有一个同步队列和一个等待队列；而Lock拥有一个同步队列和多个等待队列。**

await()从队列角度看，就是同步队列的首结点加入到了等待队列的尾结点

signal()是把等待队列的首结点，移动到同步队列的尾结点